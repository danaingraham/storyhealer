generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  children      Child[]
  stories       Story[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Child {
  id                    String   @id @default(cuid())
  userId                String
  name                  String
  age                   Int
  gender                String?  // boy/girl/non-binary
  hairColor             String?
  photoUrl              String?
  appearanceDescription String   @db.Text
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stories               Story[]
}

model Story {
  id                   String              @id @default(cuid())
  userId               String
  childId              String
  title                String
  fearDescription      String              @db.Text
  characterDescriptions Json               // JSON object with main and supporting characters
  generationStatus     GenerationStatus    @default(GENERATING)
  errorMessage         String?
  shareToken           String?             @unique
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  
  user                 User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  child                Child               @relation(fields: [childId], references: [id], onDelete: Cascade)
  pages                StoryPage[]
  conversations        PageConversation[]
}

model StoryPage {
  id                  String   @id @default(cuid())
  storyId             String
  pageNumber          Int
  text                String   @db.Text
  illustrationUrl     String?
  illustrationPrompt  String   @db.Text
  charactersInScene   String[] // Array of character names in this scene
  userUploadedImageUrl String? // User's custom uploaded image for this page
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  story               Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  
  @@unique([storyId, pageNumber])
}

model PageConversation {
  id           String   @id @default(cuid())
  storyId      String
  pageNumber   Int
  messages     Json     // Array of conversation messages
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  story        Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  
  @@unique([storyId, pageNumber])
}

enum GenerationStatus {
  GENERATING
  COMPLETED
  ERROR
}